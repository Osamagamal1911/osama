#!/bin/bash
#Mohammad Sharnouby (Al General)
red='\033[0;31m'
green='\033[0;32m'
blue='\033[0;34m'
Cyan='\033[0;46m'
mkdir logs ; mkdir DBMS 2>> ./logs/error.log
clear
function main {
  echo "1-->Select DB"
  echo "2-->Create DB"
  echo "3-->Rename DB"
  echo "4-->Drop DB"
  echo "5-->Show DBs"
  echo "6-->Exit"
  echo -e "Enter Choice: \c"
  read choice
  case $choice in
    1)  selectDB ;;
    2)  createDB ;;
    3)  renameDB ;;
    4)  dropDB ;;
    5)  ls ./DBMS;echo -e "${blue}";main;;
    6) exit ;;
    *) echo -e "${red}-->Error:$choice Not Recognized Please Choose From Menu [1 To 6]" ;echo -e "${blue} Try Again"; main;
  esac

}

function selectDB {
echo -e "Enter DataBase Name: \c"
read dbName
cd ./DBMS/$dbName  2>> ./logs/error.log
if [[ $? == 0 ]] ; then  clear ; echo -e "${green}Connected To $dbName";echo -e "${blue} Table Menu";tablesMenu;
else
echo -e "${red}Wrong DataBase Name or DataBase $dbName Not Found"
echo -e "${blue} Try Again"; main;
fi
}

function createDB {
  echo -e "Enter Database Name: \c"
  read dbName
  mkdir ./DBMS/$dbName 2>> ./logs/error.log
  if [[ $? == 0 ]] ; then
    echo -e "${green}Database $dbName Created Successfully"
  else
    echo -e "${red}Error Creating Database $dbName"
  fi
  echo -e "${blue} Main Menu";main
}

function renameDB {
  echo -e "Enter Current Database Name: \c"
  read dbName
  echo -e "Enter New Database Name: \c"
  read newName
  mv ./DBMS/$dbName ./DBMS/$newName 2>> ./logs/error.log
  if [[ $? == 0 ]] ; then
    echo -e "${green}Database $dbName Renamed Successfully New Name Is $newName"
  else
    echo -e "${red}Error Renaming Database $dbName"
  fi
  echo -e "${blue} Try Again";main
}

function dropDB {
  echo -e "Enter Database Name: \c"
  read dbName
  rm -r ./DBMS/$dbName 2>> ./logs/error.log
  if [[ $? == 0 ]] ; then
    echo -e "${green}Database $dbName Dropped Successfully"
  else
    echo -e "${red}Database $dbName Not Found"
  fi
  echo -e "${blue} Try Again";main
}

function tablesMenu {
  echo "1-->Show Existing Tables       "
  echo "2-->Create New Table           "
  echo "3-->Insert Into Table          "
  echo "4-->Select From Table          "
  echo "5-->Update Table               "
  echo "6-->Delete From Table          "
  echo "7-->Drop Table                 "
  echo "8-->Back To Main Menu          "
  echo "9-->Exit                       "
  echo -e "Enter Choice: \c"
  read choice
  case $choice in
    1)  ls .; clear ; tablesMenu ;;
    2)  createTable ;;
    3)  insert;;
    4)  clear; selectMenu ;;
    5)  updateTable;;
    6)  deleteFromTable;;
    7)  dropTable;;
    8) clear; 2>> ./logs/error.log; main ;;
    9) exit ;;
    *) echo -e "${red}Error:$choice Not Recognized Please Choose From Menu [1 To 9]" ;echo -e "${blue} Try Again"; tablesMenu;
  esac

}

function createTable {
  echo -e "Table Name: \c"
  read tableName
  if [[ -f $tableName ]]; then
    echo -e "${red}table already exist ,choose another name"
    tablesMenu
  fi
  echo -e "Number of Columns: \c"
  read colsNum
  counter=1
  sep=""
  rSep="\n"
  pKey=""
  metaData="Field"$sep"Type"$sep"key"
  while [ $counter -le $colsNum ]
  do
    echo -e "Name of Column No.$counter: \c"
    read colName

    echo -e "Type of Column $colName: "
    select var in "int" "str"
    do
      case $var in
        int ) colType="int";break;;
        str ) colType="str";break;;
        * ) echo -e "${red}Wrong Choice" ;;
      esac
    done
    if [[ $pKey == "" ]]; then
      echo -e "Make PrimaryKey ? "
      select var in "yes" "no"
      do
        case $var in
          yes ) pKey="PK";
          metaData+=$rSep$colName$sep$colType$sep$pKey;
          break;;
          no )
          metaData+=$rSep$colName$sep$colType$sep""
          break;;
          * ) echo -e "${red}Wrong Choice" ;;
        esac
      done
    else
      metaData+=$rSep$colName$sep$colType$sep""
    fi
    if [[ $counter == $colsNum ]]; then
      temp=$temp$colName
    else
      temp=$temp$colName$sep
    fi
    ((counter++))
  done
  touch .$tableName
  echo -e $metaData  >> .$tableName
  touch $tableName
  echo -e $temp >> $tableName
  if [[ $? == 0 ]]
  then
    echo -e "${green}Table Created Successfully"
    echo -e "${blue} Table Menu";tablesMenu
  else
    echo -e "${red}Error Creating Table $tableName"
    echo -e "${blue} Table Menu";tablesMenu
  fi
}

function dropTable {
  echo -e "Enter Table Name: \c"
  read tName
  rm $tName .$tName 2>> ./logs/error.log
  if [[ $? == 0 ]]
  then
    echo -e "${green}Table Dropped Successfully"
  else
    echo -e "${red}Error Dropping Table $tName"
  fi
  echo -e "${blue} Table Menu";tablesMenu
}

function insert {
  echo -e "Table Name: \c"
  read tableName
  if ! [[ -f $tableName ]]; then
    echo -e "${red}Table $tableName isn't existed ,choose another Table"
    echo -e "${blue} Table Menu";tablesMenu
  fi
  colsNum=`awk 'END{print NR}' .$tableName`
  sep=""
  rSep="\n"
  for (( i = 2; i <= $colsNum; i++ )); do
    colName=$(awk 'BEGIN{FS=""}{ if(NR=='$i') print $1}' .$tableName)
    colType=$( awk 'BEGIN{FS=""}{if(NR=='$i') print $2}' .$tableName)
    colKey=$( awk 'BEGIN{FS=""}{if(NR=='$i') print $3}' .$tableName)
    echo -e "$colName ($colType) = \c"
    read data

    # Validate Input
    if [[ $colType == "int" ]]; then
      while ! [[ $data =~ ^[0-9]*$ ]]; do
        echo -e "invalid DataType !!"
        echo -e "$colName ($colType) = \c"
        read data
      done
    fi

    if [[ $colKey == "PK" ]]; then
      while [[ true ]]; do
        if [[ $data =~ ^[`awk 'BEGIN{FS="" ; ORS=" "}{if(NR != 1)print $(('$i'-1))}' $tableName`]$ ]]; then
          echo -e "${red}invalid input for Primary Key !!"
        else
          break;
        fi
        echo -e "$colName ($colType) = \c"
        read data
      done
    fi

    #Set row
    if [[ $i == $colsNum ]]; then
      row=$row$data$rSep
    else
      row=$row$data$sep
    fi
  done
  echo -e $row"\c" >> $tableName
  if [[ $? == 0 ]]
  then
    echo -e "${green}Data Inserted Successfully"
  else
    echo -e "${red}Error Inserting Data into Table $tableName"
  fi
  row=""
  echo -e "${blue} Table Menu";tablesMenu
}

function updateTable {
  echo -e "Enter Table Name: \c"
  read tName
  echo -e "Enter Condition Column name: \c"
  read field
  fid=$(awk 'BEGIN{FS=""}{if(NR==1){for(i=1;i<=NF;i++){if($i=="'$field'") print i}}}' $tName)
  if [[ $fid == "" ]]
  then
    echo -e "${red}Not Found"
    echo -e "${blue} Table Menu";tablesMenu
  else
    echo -e "Enter Condition Value: \c"
    read val
    res=$(awk 'BEGIN{FS=""}{if ($'$fid'=="'$val'") print $'$fid'}' $tName 2>> ./logs/error.log)
    if [[ $res == "" ]]
    then
      echo -e "${red}Value Not Found"
      echo -e "${blue} Table Menu";tablesMenu
    else
      echo -e "Enter FIELD name to set: \c"
      read setField
      setFid=$(awk 'BEGIN{FS=""}{if(NR==1){for(i=1;i<=NF;i++){if($i=="'$setField'") print i}}}' $tName)
      if [[ $setFid == "" ]]
      then
        echo -e "${red}Not Found"
        echo -e "${blue} Table Menu";tablesMenu
      else
        echo -e "Enter new Value to set: \c"
        read newValue
        NR=$(awk 'BEGIN{FS=""}{if ($'$fid' == "'$val'") print NR}' $tName 2>> ./logs/error.log)
        oldValue=$(awk 'BEGIN{FS=""}{if(NR=='$NR'){for(i=1;i<=NF;i++){if(i=='$setFid') print $i}}}' $tName 2>> ./logs/error.log)
        echo $oldValue
        sed -i ''$NR's/'$oldValue'/'$newValue'/g' $tName 2>> ./logs/error.log
        echo -e "${green}Row Updated Successfully"
        echo -e "${blue} Table Menu";tablesMenu
      fi
    fi
  fi
}

function deleteFromTable {
  echo -e "Enter Table Name: \c"
  read tName
  echo -e "Enter Condition Column name: \c"
  read field
  fid=$(awk 'BEGIN{FS=""}{if(NR==1){for(i=1;i<=NF;i++){if($i=="'$field'") print i}}}' $tName)
  if [[ $fid == "" ]]
  then
    echo -e "${red}Not Found"
    echo -e "${blue} Table Menu";tablesMenu
  else
    echo -e "Enter Condition Value: \c"
    read val
    res=$(awk 'BEGIN{FS=""}{if ($'$fid'=="'$val'") print $'$fid'}' $tName 2>> ./logs/error.log)
    if [[ $res == "" ]]
    then
      echo -e "${red}Value Not Found"
      echo -e "${blue} Table Menu";tablesMenu
    else
      NR=$(awk 'BEGIN{FS=""}{if ($'$fid'=="'$val'") print NR}' $tName 2>> ./logs/error.log)
      sed -i ''$NR'd' $tName 2>> ./logs/error.log
      echo -e "${green}Row Deleted Successfully"
      echo -e "${blue} Table Menu";tablesMenu
    fi
  fi
}

function selectMenu {
  echo "1-->Select All Columns of a Table              "
  echo "2-->Select Specific Column from a Table        "
  echo "3-->Select From Table under condition          "
  echo "4-->Aggregate Function for a Specific Column   "
  echo "5-->Back To Tables Menu                        "
  echo "6-->Back To Main Menu                          "
  echo "7-->Exit                                       "
  echo -e "Enter Choice: \c"
  read choice
  case $choice in
    1) selectAll ;;
    2) selectCol ;;
    3) clear; selectCon ;;
    4) ;;
    5) clear; tablesMenu ;;
    6) clear; 2>> ./logs/error.log; main ;;
    7) exit ;;
    *) echo -e "${blue}Error:$choice Not Recognized Please Choose From Menu [1 To 7]" ;echo -e "${blue} Try Again"; selectMenu;
  esac
}

function selectAll {
  echo -e "Enter Table Name: \c"
  read tName
  column -t -s '|' $tName 2>> ./logs/error.log
  if [[ $? != 0 ]]
  then
    echo -e "${red}Error Displaying Table $tName"
  fi
  echo -e "${blue} Try Again";selectMenu
}

function selectCol {
  echo -e "Enter Table Name: \c"
  read tName
  echo -e "Enter Column Number: \c"
  read colNum
  awk 'BEGIN{FS=""}{print $'$colNum'}' $tName
  echo -e "${blue} Try Again";selectMenu
}

function selectCon {
  echo "1-->Select All Columns Matching Condition    "
  echo "2-->Select Specific Column Matching Condition"
  echo "3-->Back To Selection Menu                   "
  echo "4-->Back To Main Menu                        "
  echo "5-->Exit                                     "
  echo -e "Enter Choice: \c"
  read ch
  case $ch in
    1) clear; allCond ;;
    2) clear; specCond ;;
    3) clear; selectCon ;;
    4) clear; 2>> ./logs/error.log; main ;;
    5) exit ;;
    *) echo -e "${blue}Error:$choice Not Recognized Please Choose From Menu [1 To 5]" ;echo -e "${blue} Try Again" ;selectCon;
  esac
}

function allCond {
  echo -e "Select all columns from TABLE Where FIELD(OPERATOR)VALUE \n"
  echo -e "Enter Table Name: \c"
  read tName
  echo -e "Enter required FIELD name: \c"
  read field
  fid=$(awk 'BEGIN{FS=""}{if(NR==1){for(i=1;i<=NF;i++){if($i=="'$field'") print i}}}' $tName)
  if [[ $fid == "" ]]
  then
    echo -e "${red}Not Found"
    echo -e "${blue} Try Again" ;selectCon
  else
    echo -e "\nSupported Operators: [==, !=, >, <, >=, <=] \nSelect OPERATOR: \c"
    read op
    if [[ $op == "==" ]] || [[ $op == "!=" ]] || [[ $op == ">" ]] || [[ $op == "<" ]] || [[ $op == ">=" ]] || [[ $op == "<=" ]]
    then
      echo -e "\nEnter required VALUE: \c"
      read val
      res=$(awk 'BEGIN{FS=""}{if ($'$fid$op$val') print $0}' $tName 2>> ./logs/error.log |  column -t -s '|')
      if [[ $res == "" ]]
      then
        echo -e "${red}Value Not Found"
        echo -e "${blue} Try Again" ;selectCon
      else
        awk 'BEGIN{FS=""}{if ($'$fid$op$val') print $0}' $tName 2>> ./logs/error.log |  column -t -s '|'
        echo -e "${blue} Try Again" ;selectCon
      fi
    else
      echo -e "${red}Unsupported Operator\n"
      echo -e "${blue} Try Again" ;selectCon
    fi
  fi
}

function specCond {
  echo -e "Select specific column from TABLE Where FIELD(OPERATOR)VALUE \n"
  echo -e "Enter Table Name: \c"
  read tName
  echo -e "Enter required FIELD name: \c"
  read field
  fid=$(awk 'BEGIN{FS=""}{if(NR==1){for(i=1;i<=NF;i++){if($i=="'$field'") print i}}}' $tName)
  if [[ $fid == "" ]]
  then
    echo -e "${red}Not Found"
    echo -e "${blue} Try Again" ;selectCon
  else
    echo -e "\nSupported Operators: [==, !=, >, <, >=, <=] \nSelect OPERATOR: \c"
    read op
    if [[ $op == "==" ]] || [[ $op == "!=" ]] || [[ $op == ">" ]] || [[ $op == "<" ]] || [[ $op == ">=" ]] || [[ $op == "<=" ]]
    then
      echo -e "\nEnter required VALUE: \c"
      read val
      res=$(awk 'BEGIN{FS=""; ORS="\n"}{if ($'$fid$op$val') print $'$fid'}' $tName 2>> ./logs/error.log |  column -t -s '|')
      if [[ $res == "" ]]
      then
        echo "Value Not Found"
        echo -e "${blue} Try Again" ;selectCon
      else
        awk 'BEGIN{FS=""; ORS="\n"}{if ($'$fid$op$val') print $'$fid'}' $tName 2>> ./logs/error.log |  column -t -s '|'
        echo -e "${blue} Try Again" ;selectCon
      fi
    else
      echo -e "${red}Unsupported Operator\n"
      echo -e "${blue} Try Again" ;selectCon
    fi
  fi
}


clear ;echo -e "${blue}";main